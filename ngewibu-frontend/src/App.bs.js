// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.bs.js";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.bs.js";

var ongoing = Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.object(function (field) {
          return {
                  title: field.required("title", Json_Decode$JsonCombinators.string),
                  image: field.required("image", Json_Decode$JsonCombinators.string),
                  link: field.required("link", Json_Decode$JsonCombinators.string)
                };
        }));

var Decode = {
  ongoing: ongoing
};

async function getOngoing(param) {
  try {
    var response = await fetch("/api/ongoing", {
          method: "GET",
          headers: Caml_option.some(new Headers({
                    "Content-Type": "application/json"
                  }))
        });
    var json = await response.json();
    return Json$JsonCombinators.decode(json, ongoing);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      var msg = err._1.message;
      if (msg !== undefined) {
        return {
                TAG: /* Error */1,
                _0: "Error: " + msg
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown error"
              };
      }
    }
    throw err;
  }
}

function App$AnimeCard(props) {
  var data = props.data;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("a", {
                      children: JsxRuntime.jsx("img", {
                            className: "w-40 h-56 rounded-sm",
                            src: data.image
                          }),
                      href: data.link,
                      target: "_blank"
                    }),
                JsxRuntime.jsx("p", {
                      children: data.title,
                      className: "text-center w-40"
                    })
              ],
              className: "flex flex-col items-center"
            }, data.title);
}

var AnimeCard = {
  make: App$AnimeCard
};

function App$OngoingList(props) {
  var match = React.useState(function () {
        return true;
      });
  var setLoading = match[1];
  var match$1 = React.useState(function () {
        return [];
      });
  var setAnimes = match$1[1];
  var match$2 = React.useState(function () {
        
      });
  var setError = match$2[1];
  var error = match$2[0];
  React.useEffect((function () {
          var fetchData = async function (param) {
            var result = await getOngoing(undefined);
            if (result.TAG === /* Ok */0) {
              var animes = result._0;
              Curry._1(setAnimes, (function (param) {
                      return animes;
                    }));
              return Curry._1(setLoading, (function (param) {
                            return false;
                          }));
            }
            var err = result._0;
            console.log(err);
            Curry._1(setLoading, (function (param) {
                    return false;
                  }));
            return Curry._1(setError, (function (param) {
                          return err;
                        }));
          };
          fetchData(undefined);
        }), []);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h1", {
                      children: "Ngewibu",
                      className: "text-3xl"
                    }),
                match[0] ? JsxRuntime.jsx("p", {
                        children: "Loading...",
                        className: "text-center mt-6"
                      }) : (
                    error !== undefined ? JsxRuntime.jsx("p", {
                            children: error,
                            className: "text-center mt-6"
                          }) : JsxRuntime.jsx("div", {
                            children: Belt_Array.map(match$1[0], (function (data) {
                                    return JsxRuntime.jsx(App$AnimeCard, {
                                                data: data
                                              }, data.title);
                                  })),
                            className: "flex gap-3 mt-6 flex-wrap"
                          })
                  )
              ],
              className: "container mx-auto mt-12"
            });
}

var OngoingList = {
  make: App$OngoingList
};

function App(props) {
  return JsxRuntime.jsx(App$OngoingList, {});
}

var make = App;

export {
  Decode ,
  getOngoing ,
  AnimeCard ,
  OngoingList ,
  make ,
}
/* ongoing Not a pure module */
